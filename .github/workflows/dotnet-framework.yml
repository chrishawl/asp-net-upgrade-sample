name: .NET Framework CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SOLUTION_FILE: aspnet-upgrade-sample.sln
  BUILD_CONFIGURATION: Release

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2.0.0
      with:
        nuget-version: 'latest'

    - name: Restore NuGet packages
      run: |
        Write-Host "Restoring NuGet packages..."
        nuget restore ${{ env.SOLUTION_FILE }} -PackagesDirectory packages -Verbosity normal
        
        # Verify critical packages were restored
        $criticalPackages = @(
          "packages\xunit.runner.console.2.4.1\tools\net452\xunit.console.exe",
          "packages\Microsoft.Net.Compilers.3.6.0\build\Microsoft.Net.Compilers.props"
        )
        
        foreach ($package in $criticalPackages) {
          if (!(Test-Path $package)) {
            throw "Critical package not found: $package"
          } else {
            Write-Host "Verified package: $package"
          }
        }
        
        Write-Host "NuGet packages restored successfully!"
      shell: powershell

    - name: Build solution
      run: |
        Write-Host "Building solution..."
        msbuild ${{ env.SOLUTION_FILE }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform="Any CPU" /verbosity:normal
        
        if ($LASTEXITCODE -ne 0) {
          throw "MSBuild failed with exit code $LASTEXITCODE"
        }
        
        Write-Host "Build completed successfully!"
      shell: powershell

    - name: Create test results directory
      run: |
        if (!(Test-Path "TestResults")) { New-Item -ItemType Directory -Path "TestResults" }
      shell: powershell

    - name: Run tests
      run: |
        $testDll = "tests\MVCRandomAnswerGenerator.Framework.Tests\bin\${{ env.BUILD_CONFIGURATION }}\MVCRandomAnswerGenerator.Framework.Tests.dll"
        $xunitRunner = ".\packages\xunit.runner.console.2.4.1\tools\net452\xunit.console.exe"
        
        Write-Host "Running tests..."
        Write-Host "Test DLL: $testDll"
        Write-Host "xUnit runner: $xunitRunner"
        
        # Verify test assembly exists
        if (!(Test-Path $testDll)) {
          throw "Test assembly not found at: $testDll"
        }
        
        # Verify xUnit runner exists
        if (!(Test-Path $xunitRunner)) {
          throw "xUnit console runner not found at: $xunitRunner"
        }
        
        # Run tests with coverage collection
        & $xunitRunner $testDll -xml TestResults\test-results.xml -verbose
        
        if ($LASTEXITCODE -ne 0) {
          throw "Tests failed with exit code $LASTEXITCODE"
        } else {
          Write-Host "All tests passed successfully!"
        }
      shell: powershell

    - name: Generate coverage report
      run: |
        Write-Host "Setting up code coverage..."
        
        # Install OpenCover for .NET Framework code coverage
        if (!(Test-Path "packages\OpenCover.4.7.1221\tools\OpenCover.Console.exe")) {
          Write-Host "Installing OpenCover package..."
          nuget install OpenCover -Version 4.7.1221 -OutputDirectory packages
        }
        
        # Install ReportGenerator for coverage reports
        if (!(Test-Path "packages\ReportGenerator.5.1.26\tools\net47\ReportGenerator.exe")) {
          Write-Host "Installing ReportGenerator package..."
          nuget install ReportGenerator -Version 5.1.26 -OutputDirectory packages
        }
        
        $openCover = ".\packages\OpenCover.4.7.1221\tools\OpenCover.Console.exe"
        $reportGenerator = ".\packages\ReportGenerator.5.1.26\tools\net47\ReportGenerator.exe"
        $testDll = "tests\MVCRandomAnswerGenerator.Framework.Tests\bin\${{ env.BUILD_CONFIGURATION }}\MVCRandomAnswerGenerator.Framework.Tests.dll"
        $xunitRunner = ".\packages\xunit.runner.console.2.4.1\tools\net452\xunit.console.exe"
        
        # Create coverage directory
        if (!(Test-Path "TestResults\Coverage")) { New-Item -ItemType Directory -Path "TestResults\Coverage" }
        
        # Run tests with code coverage
        Write-Host "Running tests with code coverage..."
        & $openCover `
          -target:$xunitRunner `
          -targetargs:"$testDll -xml TestResults\test-results-coverage.xml -noshadow" `
          -filter:"+[MVCRandomAnswerGenerator*]* -[*.Tests]*" `
          -output:"TestResults\Coverage\coverage.xml" `
          -register:user `
          -returntargetcode
        
        if ($LASTEXITCODE -ne 0) {
          Write-Warning "Code coverage collection encountered issues, but continuing..."
        }
        
        # Generate HTML coverage report
        if (Test-Path "TestResults\Coverage\coverage.xml") {
          Write-Host "Generating HTML coverage report..."
          & $reportGenerator `
            -reports:"TestResults\Coverage\coverage.xml" `
            -targetdir:"TestResults\Coverage\Html" `
            -reporttypes:"Html;Cobertura"
          
          if (Test-Path "TestResults\Coverage\Html\index.html") {
            Write-Host "Coverage report generated successfully!"
          } else {
            Write-Warning "HTML coverage report generation failed"
          }
        } else {
          Write-Warning "Coverage XML file not found, skipping HTML report generation"
        }
      shell: powershell

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: TestResults/Coverage/

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Framework Tests
        path: TestResults/test-results*.xml
        reporter: java-junit
        fail-on-error: true

    - name: Create deployment artifacts
      run: |
        Write-Host "Creating deployment artifacts..."
        
        # Create artifacts directory
        if (!(Test-Path "artifacts")) { New-Item -ItemType Directory -Path "artifacts" }
        
        # Copy built application files
        $sourcePath = "src\MVCRandomAnswerGenerator.Framework\MVCRandomAnswerGenerator"
        $artifactPath = "artifacts\MVCRandomAnswerGenerator.Framework"
        
        if (!(Test-Path $artifactPath)) { New-Item -ItemType Directory -Path $artifactPath -Force }
        
        # Copy application files (excluding source code, keeping only compiled output and content)
        $excludePatterns = @("*.cs", "*.csproj", "*.user", "obj", "Properties\AssemblyInfo.cs")
        
        Write-Host "Copying application files..."
        robocopy $sourcePath $artifactPath /E /XD obj /XF *.cs *.csproj *.user /NFL /NDL /NJH /NJS /NC /NS /NP
        
        # Copy bin directory specifically
        if (Test-Path "$sourcePath\bin\${{ env.BUILD_CONFIGURATION }}") {
          Write-Host "Copying bin files..."
          robocopy "$sourcePath\bin\${{ env.BUILD_CONFIGURATION }}" "$artifactPath\bin" /E /NFL /NDL /NJH /NJS /NC /NS /NP
        }
        
        # Create a simple deployment manifest
        $manifestContent = "{`"application`": `"MVCRandomAnswerGenerator.Framework`", `"version`": `"1.0.0`", `"buildConfiguration`": `"${{ env.BUILD_CONFIGURATION }}`", `"buildDate`": `"$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`", `"gitCommit`": `"${{ github.sha }}`", `"gitBranch`": `"${{ github.ref_name }}`", `"framework`": `".NET Framework 4.7.2`"}"
        $manifestContent | Out-File -FilePath "artifacts\deployment-manifest.json" -Encoding UTF8
        
        # List contents for verification
        Write-Host "Deployment artifacts created:"
        Get-ChildItem -Path "artifacts" -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
      shell: powershell

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts
        path: artifacts/
        retention-days: 30

    - name: Comment on PR with build summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## âœ… .NET Framework CI/CD Build Summary\n\n';
          comment += `**Workflow:** ${context.workflow}\n`;
          comment += `**Run:** [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          comment += `**Commit:** ${context.sha.substring(0, 7)}\n`;
          comment += `**Branch:** ${context.ref.replace('refs/heads/', '')}\n\n`;
          
          comment += '### ðŸ“Š Build Results\n';
          comment += '- âœ… NuGet packages restored successfully\n';
          comment += '- âœ… Solution built successfully (.NET Framework 4.7.2)\n';
          comment += '- âœ… Unit tests executed and passed\n';
          comment += '- âœ… Code coverage collected\n';
          comment += '- âœ… Deployment artifacts generated\n\n';
          
          comment += '### ðŸ“¦ Generated Artifacts\n';
          comment += '- **Test Results**: Unit test execution results and coverage reports\n';
          comment += '- **Coverage Report**: HTML code coverage analysis\n';
          comment += '- **Deployment Artifacts**: Ready-to-deploy application files\n\n';
          
          comment += '### ðŸŽ¯ Next Steps\n';
          comment += 'The .NET Framework application is ready for deployment. ';
          comment += 'All artifacts are available in the workflow run for download.\n\n';
          
          comment += '---\n';
          comment += '*This build summary was automatically generated by the .NET Framework CI/CD pipeline.*';
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });