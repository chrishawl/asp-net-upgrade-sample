name: CI Build and Test

on:
  push:
    branches: [ main, develop, "copilot/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  SOLUTION_FILE: aspnet-upgrade-sample.sln
  BUILD_CONFIGURATION: Release

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2.0.0
      with:
        nuget-version: 'latest'

    - name: Verify .NET Framework Installation
      run: |
        Write-Host "=== .NET Framework Version Information ==="
        # Check available .NET Framework versions
        $dotnetVersions = Get-ChildItem "HKLM:SOFTWARE\Microsoft\NET Framework Setup\NDP" -Recurse |
          Get-ItemProperty -Name version, release -EA 0 |
          Where-Object { $_.PSChildName -match '^(?!S)\p{Nd}' } |
          Select-Object PSChildName, version, release
        
        Write-Host "Installed .NET Framework versions:"
        $dotnetVersions | Format-Table
        
        # Check MSBuild version
        Write-Host "MSBuild version:"
        msbuild -version
        
        Write-Host "Environment ready for .NET Framework 4.7.2 build"
      shell: powershell

    - name: Restore NuGet packages
      run: nuget restore ${{ env.SOLUTION_FILE }}
      shell: powershell

    - name: Build solution
      run: msbuild ${{ env.SOLUTION_FILE }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform="Any CPU" /verbosity:minimal
      shell: powershell

    - name: Create test results directory
      run: |
        if (!(Test-Path "TestResults")) { New-Item -ItemType Directory -Path "TestResults" }
      shell: powershell

    - name: Run xUnit tests
      run: |
        $testDll = "tests\MVCRandomAnswerGenerator.Framework.Tests\bin\${{ env.BUILD_CONFIGURATION }}\MVCRandomAnswerGenerator.Framework.Tests.dll"
        $xunitRunner = ".\packages\xunit.runner.console.2.4.1\tools\net452\xunit.console.exe"
        
        # Verify test assembly exists
        if (!(Test-Path $testDll)) {
          Write-Error "Test assembly not found at: $testDll"
          exit 1
        }
        
        # Verify xUnit runner exists
        if (!(Test-Path $xunitRunner)) {
          Write-Error "xUnit console runner not found at: $xunitRunner"
          exit 1
        }
        
        Write-Host "Running tests..."
        & $xunitRunner $testDll -xml TestResults\test-results.xml
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Tests failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        } else {
          Write-Host "All tests passed successfully!"
        }
      shell: powershell

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Framework Tests
        path: TestResults/test-results.xml
        reporter: java-junit
        fail-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/